{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-e3aba13924396846.js","src/chesspath/js/main.js","node_modules/pathfinding/index.js","node_modules/pathfinding/src/PathFinding.js","node_modules/heap/index.js","node_modules/heap/lib/heap.js","node_modules/pathfinding/src/core/Node.js","node_modules/pathfinding/src/core/Grid.js","node_modules/pathfinding/src/core/DiagonalMovement.js","node_modules/pathfinding/src/core/Util.js","node_modules/pathfinding/src/core/Heuristic.js","node_modules/pathfinding/src/finders/AStarFinder.js","node_modules/pathfinding/src/finders/BestFirstFinder.js","node_modules/pathfinding/src/finders/BreadthFirstFinder.js","node_modules/pathfinding/src/finders/DijkstraFinder.js","node_modules/pathfinding/src/finders/BiAStarFinder.js","node_modules/pathfinding/src/finders/BiBestFirstFinder.js","node_modules/pathfinding/src/finders/BiBreadthFirstFinder.js","node_modules/pathfinding/src/finders/BiDijkstraFinder.js","node_modules/pathfinding/src/finders/IDAStarFinder.js","node_modules/pathfinding/src/finders/JumpPointFinder.js","node_modules/pathfinding/src/finders/JPFNeverMoveDiagonally.js","node_modules/pathfinding/src/finders/JumpPointFinderBase.js","node_modules/pathfinding/src/finders/JPFAlwaysMoveDiagonally.js","node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfNoObstacles.js","node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","node_modules/@parcel/runtime-js/lib/runtime-6a92496447b94a9c.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-url.js","node_modules/@parcel/runtime-js/lib/runtime-33bbf5935de575c1.js","node_modules/@parcel/runtime-js/lib/runtime-db306cccba7a00e1.js","node_modules/@parcel/runtime-js/lib/runtime-a1c929606016159c.js","node_modules/@parcel/runtime-js/lib/runtime-3396eef37001c5a1.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"69f74e7f31319ffd\";module.bundle.HMR_BUNDLE_ID = \"6e18562e0cfec7fc\";\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */\n\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: mixed;\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function accept(fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function dispose(fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData = undefined;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets\n/*: {|[string]: boolean|} */\n, acceptedAssets\n/*: {|[string]: boolean|} */\n, assetsToAccept\n/*: Array<[ParcelRequire, string]> */\n;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\n\nfunction getPort() {\n  return HMR_PORT || location.port;\n} // eslint-disable-next-line no-redeclare\n\n\nvar parent = module.bundle.parent;\n\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe\n\n  ws.onmessage = function (event\n  /*: {data: string, ...} */\n  ) {\n    checkedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    acceptedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    assetsToAccept = [];\n    var data\n    /*: HMRMessage */\n    = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      removeErrorOverlay();\n      var assets = data.assets.filter(function (asset) {\n        return asset.envHash === HMR_ENV_HASH;\n      }); // Handle HMR Update\n\n      var handled = assets.every(function (asset) {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n\n      if (handled) {\n        console.clear();\n        assets.forEach(function (asset) {\n          hmrApply(module.bundle.root, asset);\n        });\n\n        for (var i = 0; i < assetsToAccept.length; i++) {\n          var id = assetsToAccept[i][1];\n\n          if (!acceptedAssets[id]) {\n            hmrAcceptRun(assetsToAccept[i][0], id);\n          }\n        }\n      } else {\n        window.location.reload();\n      }\n    }\n\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var ansiDiagnostic = _step.value;\n          var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n          console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n        } // Render the fancy html overlay\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      removeErrorOverlay();\n      var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe\n\n      document.body.appendChild(overlay);\n    }\n  };\n\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\n\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  var errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n\n  var _iterator2 = _createForOfIteratorHelper(diagnostics),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var diagnostic = _step2.value;\n      var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;\n      errorHTML += \"\\n      <div>\\n        <div style=\\\"font-size: 18px; font-weight: bold; margin-top: 20px;\\\">\\n          \\uD83D\\uDEA8 \".concat(diagnostic.message, \"\\n        </div>\\n        <pre>\\n          \").concat(stack, \"\\n        </pre>\\n        <div>\\n          \").concat(diagnostic.hints.map(function (hint) {\n        return '<div>' + hint + '</div>';\n      }).join(''), \"\\n        </div>\\n      </div>\\n    \");\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\n\nfunction getParents(bundle, id)\n/*: Array<[ParcelRequire, string]> */\n{\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n\n  newLink.setAttribute('href', // $FlowFixMe\n  link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe\n\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\n\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href\n      /*: string */\n      = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;\n\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nfunction hmrApply(bundle\n/*: ParcelRequire */\n, asset\n/*:  HMRAsset */\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (asset.type === 'css') {\n    reloadCSS();\n    return;\n  }\n\n  var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n\n  if (deps) {\n    var fn = new Function('require', 'module', 'exports', asset.output);\n    modules[asset.id] = [fn, deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(module.bundle.root, id).some(function (v) {\n    return hmrAcceptCheck(v[0], v[1], null);\n  });\n}\n\nfunction hmrAcceptRun(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n  cached = bundle.cache[id];\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n\n  acceptedAssets[id] = true;\n}","/* global Phaser, $ */\nimport PF from \"pathfinding\";\nimport ground from \"../img/ground.png\";\nimport knight from \"../img/knight.png\";\nimport bishop from \"../img/bishop.png\";\nimport bishopOdd from \"../img/bishop-odd.png\";\nimport chazz from \"../img/princhess.png\";\n\nconst tileSize = 48;\n\nlet score = 0;\n\nconsole.log(\"game start!\");\n\n/*\n * -----------------------------\n *      CHESS PATHFINDING\n * -----------------------------\n */\nfunction getChessNeighbors(node) {\n  const { nodes } = this;\n  let explore;\n  const curx = node.x;\n  const cury = node.y;\n  const possibleMoves = [];\n  const { piece } = this;\n  const findMove = (dx, dy, grid) => {\n    let x = curx + dx;\n    let y = cury + dy;\n    while (grid.isWalkableAt(x, y)) {\n      possibleMoves.push(nodes[y][x]);\n      if (explore.single) {\n        break;\n      }\n      x += dx;\n      y += dy;\n    }\n  };\n  if (piece === \"rook\") {\n    explore = [\n      [0, 1],\n      [1, 0],\n      [0, -1],\n      [-1, 0],\n    ];\n  } else if (piece === \"bishop\") {\n    explore = [\n      [1, 1],\n      [1, -1],\n      [-1, 1],\n      [-1, -1],\n    ];\n  } else if (piece === \"knight\") {\n    explore = [\n      [2, 1],\n      [1, 2],\n      [-1, 2],\n      [-2, 1],\n      [-2, -1],\n      [-1, -2],\n      [1, -2],\n      [2, -1],\n    ];\n    explore.single = true;\n  } else if (piece === \"king\" || piece === \"queen\") {\n    explore = [\n      [1, 0],\n      [0, 1],\n      [-1, 0],\n      [0, -1],\n      [1, 1],\n      [1, -1],\n      [-1, -1],\n      [-1, 1],\n    ];\n    if (piece === \"king\") explore.single = true;\n  }\n  for (let i = 0; i < explore.length; i += 1) {\n    const dx = explore[i][0];\n    const dy = explore[i][1];\n    findMove(dx, dy, this);\n  }\n\n  return possibleMoves;\n}\n\n// game level (walkability)\nconst matrix = [\n  [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0],\n  [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1],\n  [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0],\n  [1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1],\n  [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0],\n  [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1],\n  [1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0],\n  [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1],\n  [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0],\n  [1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1],\n  [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0],\n];\nconst grid = new PF.Grid(matrix);\n\nconst finder = new PF.AStarFinder({\n  heuristic(x, y) {\n    return 0.1 * (x + y); // Lower number means better paths, worse performace.\n  },\n});\n\nconst findPath = (x1, y1, x2, y2, piece) => {\n  const chessGrid = grid.clone();\n  chessGrid.piece = piece;\n  chessGrid.getNeighbors = getChessNeighbors;\n  const path = finder.findPath(x1, y1, x2, y2, chessGrid);\n\n  return path;\n};\n\nfindPath(1, 7, 5, 6, \"knight\");\n\n/*\n * -----------------\n *      PHASER\n * -----------------\n */\n\n// global game variables\nlet map;\nlet enemies;\nlet mainCharacter;\nlet uiOverlay;\nlet game;\nconst enemytypes = [\"knight\", \"bishop\"];\n\n// global game functions\nconst preload = () => {\n  game.load.image(\"ground\", ground);\n  game.load.image(\"enemy-knight\", knight);\n  game.load.image(\"enemy-bishop\", bishop);\n  game.load.image(\"enemy-bishop-odd\", bishopOdd);\n  game.load.spritesheet(\"main-character\", chazz, 24, 35);\n};\n\nconst update = () => {};\n\nconst render = () => {};\n\n// Other Global functions\nconst drawMoves = (moves) => {\n  uiOverlay.beginFill(0x006600, 0.5);\n  for (let i = 0; i < moves.length; i += 1) {\n    const sx = moves[i].x;\n    const sy = moves[i].y;\n    uiOverlay.drawCircle(\n      sx * tileSize + tileSize / 2,\n      sy * tileSize + tileSize / 2,\n      tileSize / 1.5\n    );\n  }\n  uiOverlay.endFill();\n};\n\nconst getUpdatedGrid = () => {\n  const newGrid = grid.clone();\n  for (let i = 0; i < enemies.children.length; i += 1) {\n    const x = Math.floor(enemies.children[i].x / tileSize);\n    const y = Math.floor(enemies.children[i].y / tileSize);\n    newGrid.setWalkableAt(x, y, false);\n  }\n  return newGrid;\n};\n\nconst moveEnemies = () => {\n  for (let i = 0; i < enemies.children.length; i += 1) {\n    const x = Math.floor(enemies.children[i].x / tileSize);\n    const y = Math.floor(enemies.children[i].y / tileSize);\n    const currentGrid = getUpdatedGrid();\n    currentGrid.piece = enemies.children[i].piece;\n    currentGrid.getNeighbors = getChessNeighbors;\n    const path = finder.findPath(\n      x,\n      y,\n      Math.floor(mainCharacter.x / tileSize),\n      Math.floor(mainCharacter.y / tileSize),\n      currentGrid\n    );\n    if (path.length > 0) {\n      enemies.children[i].x = path[1][0] * tileSize;\n      enemies.children[i].y = path[1][1] * tileSize;\n    }\n  }\n};\n\nconst addEnemy = (x, y, type) => {\n  enemies.create(\n    x * tileSize,\n    y * tileSize,\n    `enemy-${type}${\n      (x % 2) * (y % 2) + ((x + 1) % 2) * ((y + 1) % 2) === 1 &&\n      type === \"bishop\"\n        ? \"-odd\"\n        : \"\"\n    }`\n  );\n  enemies.children[enemies.children.length - 1].piece = type;\n  enemies.children[enemies.children.length - 1].anchor.y = 0.35;\n  enemies.children[enemies.children.length - 1].anchor.x = -0.15;\n};\n\nconst addRandomEnemy = () => {\n  const x = Math.floor(Math.random() * matrix.length);\n  const y = Math.floor(Math.random() * matrix.length);\n  const currentGrid = getUpdatedGrid();\n  currentGrid.setWalkableAt(\n    Math.floor(mainCharacter.x / tileSize),\n    Math.floor(mainCharacter.y / tileSize),\n    false\n  );\n  if (currentGrid.isWalkableAt(x, y)) {\n    addEnemy(x, y, enemytypes[Math.floor(Math.random() * enemytypes.length)]);\n  } else {\n    addRandomEnemy();\n  }\n};\n\nconst getMainMoves = (forceLegal) => {\n  // First, check if our move was legal. Based on previously determined legal moves/current position\n  let legalMove = forceLegal === true;\n  for (let i = 0; i < mainCharacter.oldMoves.length && !legalMove; i += 1) {\n    legalMove =\n      mainCharacter.oldMoves[i].x === Math.floor(mainCharacter.x / tileSize) &&\n      mainCharacter.oldMoves[i].y === Math.floor(mainCharacter.y / tileSize);\n  }\n  for (let i = 0; i < enemies.children.length && !legalMove; i += 1) {\n    legalMove =\n      Math.floor(enemies.children[i].x / tileSize) ===\n        Math.floor(mainCharacter.x / tileSize) &&\n      Math.floor(enemies.children[i].y / tileSize) ===\n        Math.floor(mainCharacter.y / tileSize);\n  }\n  // If the move is legal, move the character, get new possible moves and draw those.\n  if (legalMove) {\n    // erase possible moves\n    uiOverlay.clear();\n    // move character\n    mainCharacter.oldPosition = { x: mainCharacter.x, y: mainCharacter.y };\n    const x = Math.floor(mainCharacter.x / tileSize);\n    const y = Math.floor(mainCharacter.y / tileSize);\n    //\n    const node = { x, y };\n    let currentGrid = getUpdatedGrid();\n    currentGrid.piece = \"queen\";\n    currentGrid.getNeighbors = getChessNeighbors;\n    // check if any enemy was killed\n    const enemyKilled = !currentGrid.isWalkableAt(x, y);\n    if (enemyKilled) {\n      console.log(\"you killed an enemy!\");\n      score += 1;\n      $(\"h1\").html(score);\n      for (let i = 0; i < enemies.children.length; i += 1) {\n        const ex = Math.floor(enemies.children[i].x / tileSize);\n        const ey = Math.floor(enemies.children[i].y / tileSize);\n        if (x === ex && y === ey) {\n          enemies.children[i].kill();\n          enemies.removeChild(enemies.children[i]);\n        }\n      }\n    }\n    moveEnemies();\n    if (enemyKilled) {\n      addRandomEnemy();\n      addRandomEnemy();\n    }\n    // check if dead\n    if (!getUpdatedGrid().isWalkableAt(x, y)) {\n      console.log(\"you're dead!\");\n      mainCharacter.kill();\n      $(\"body\").append(\n        '<h1><a href=\"index.html\">Game over :( - Play again!</a></h1>'\n      );\n      return;\n    }\n    currentGrid = getUpdatedGrid();\n    currentGrid.piece = \"queen\";\n    currentGrid.getNeighbors = getChessNeighbors;\n    const moves = currentGrid.getNeighbors(node, null);\n    mainCharacter.oldMoves = moves;\n    drawMoves(moves);\n  } // If the move was illegal, return the character back to its original position.\n  else {\n    mainCharacter.x = mainCharacter.oldPosition.x;\n    mainCharacter.y = mainCharacter.oldPosition.y;\n  }\n};\n\nconst create = () => {\n  // initialize and draw map\n\n  map = game.add.tilemap();\n  map.tileWidth = tileSize;\n  map.tileHeight = tileSize;\n  map.addTilesetImage(\"ground\");\n\n  const levelLayer = map.create(\n    \"level1\",\n    matrix[0].length,\n    matrix.length,\n    tileSize,\n    tileSize\n  );\n  levelLayer.resizeWorld();\n\n  for (let y = 0; y < matrix.length; y += 1) {\n    for (let x = 0; x < matrix[y].length; x += 1) {\n      map.putTile(\n        matrix[y][x] * 2 + (x % 2) * (y % 2) + ((x + 1) % 2) * ((y + 1) % 2),\n        x,\n        y,\n        levelLayer\n      );\n    }\n  }\n\n  // UI Overlay\n  uiOverlay = game.add.graphics(0, 0);\n\n  // Enemies\n  enemies = game.add.group();\n  addEnemy(3, 3, \"knight\");\n\n  // main character\n  mainCharacter = game.add.sprite(0, 0, \"main-character\");\n  mainCharacter.oldPosition = { x: 0, y: 0 };\n  mainCharacter.oldMoves = [];\n  mainCharacter.width = 24;\n  mainCharacter.height = 35;\n  mainCharacter.anchor.x = -0.475;\n  mainCharacter.anchor.y = -0.1825;\n  mainCharacter.animations.add(\"idle\", [0, 1, 2, 3], 5, true);\n  mainCharacter.animations.play(\"idle\");\n  mainCharacter.inputEnabled = true;\n  mainCharacter.input.enableDrag();\n  mainCharacter.input.enableSnap(tileSize, tileSize, false, true);\n  mainCharacter.input.useHandCursor = true;\n\n  mainCharacter.events.onDragStop.add(getMainMoves);\n\n  getMainMoves(true);\n};\n\ngame = new Phaser.Game(\n  tileSize * matrix.length,\n  tileSize * matrix.length,\n  Phaser.CANVAS,\n  \"chess\",\n  { preload, create, update, render }\n);\n","module.exports = require('./src/PathFinding');\r\n","module.exports = {\r\n    'Heap'                      : require('heap'),\r\n    'Node'                      : require('./core/Node'),\r\n    'Grid'                      : require('./core/Grid'),\r\n    'Util'                      : require('./core/Util'),\r\n    'DiagonalMovement'          : require('./core/DiagonalMovement'),\r\n    'Heuristic'                 : require('./core/Heuristic'),\r\n    'AStarFinder'               : require('./finders/AStarFinder'),\r\n    'BestFirstFinder'           : require('./finders/BestFirstFinder'),\r\n    'BreadthFirstFinder'        : require('./finders/BreadthFirstFinder'),\r\n    'DijkstraFinder'            : require('./finders/DijkstraFinder'),\r\n    'BiAStarFinder'             : require('./finders/BiAStarFinder'),\r\n    'BiBestFirstFinder'         : require('./finders/BiBestFirstFinder'),\r\n    'BiBreadthFirstFinder'      : require('./finders/BiBreadthFirstFinder'),\r\n    'BiDijkstraFinder'          : require('./finders/BiDijkstraFinder'),\r\n    'IDAStarFinder'             : require('./finders/IDAStarFinder'),\r\n    'JumpPointFinder'           : require('./finders/JumpPointFinder'),\r\n};\r\n","module.exports = require('./lib/heap');\n","// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  if (typeof module !== \"undefined\" && module !== null ? module.exports : void 0) {\n    module.exports = Heap;\n  } else {\n    window.Heap = Heap;\n  }\n\n}).call(this);\n","/**\r\n * A node in grid. \r\n * This class holds some basic information about a node and custom \r\n * attributes may be added, depending on the algorithms' needs.\r\n * @constructor\r\n * @param {number} x - The x coordinate of the node on the grid.\r\n * @param {number} y - The y coordinate of the node on the grid.\r\n * @param {boolean} [walkable] - Whether this node is walkable.\r\n */\r\nfunction Node(x, y, walkable) {\r\n    /**\r\n     * The x coordinate of the node on the grid.\r\n     * @type number\r\n     */\r\n    this.x = x;\r\n    /**\r\n     * The y coordinate of the node on the grid.\r\n     * @type number\r\n     */\r\n    this.y = y;\r\n    /**\r\n     * Whether this node can be walked through.\r\n     * @type boolean\r\n     */\r\n    this.walkable = (walkable === undefined ? true : walkable);\r\n}\r\n\r\nmodule.exports = Node;\r\n","var Node = require('./Node');\r\nvar DiagonalMovement = require('./DiagonalMovement');\r\n\r\n/**\r\n * The Grid class, which serves as the encapsulation of the layout of the nodes.\r\n * @constructor\r\n * @param {number|Array<Array<(number|boolean)>>} width_or_matrix Number of columns of the grid, or matrix\r\n * @param {number} height Number of rows of the grid.\r\n * @param {Array<Array<(number|boolean)>>} [matrix] - A 0-1 matrix\r\n *     representing the walkable status of the nodes(0 or false for walkable).\r\n *     If the matrix is not supplied, all the nodes will be walkable.  */\r\nfunction Grid(width_or_matrix, height, matrix) {\r\n    var width;\r\n\r\n    if (typeof width_or_matrix !== 'object') {\r\n        width = width_or_matrix;\r\n    } else {\r\n        height = width_or_matrix.length;\r\n        width = width_or_matrix[0].length;\r\n        matrix = width_or_matrix;\r\n    }\r\n\r\n    /**\r\n     * The number of columns of the grid.\r\n     * @type number\r\n     */\r\n    this.width = width;\r\n    /**\r\n     * The number of rows of the grid.\r\n     * @type number\r\n     */\r\n    this.height = height;\r\n\r\n    /**\r\n     * A 2D array of nodes.\r\n     */\r\n    this.nodes = this._buildNodes(width, height, matrix);\r\n}\r\n\r\n/**\r\n * Build and return the nodes.\r\n * @private\r\n * @param {number} width\r\n * @param {number} height\r\n * @param {Array<Array<number|boolean>>} [matrix] - A 0-1 matrix representing\r\n *     the walkable status of the nodes.\r\n * @see Grid\r\n */\r\nGrid.prototype._buildNodes = function(width, height, matrix) {\r\n    var i, j,\r\n        nodes = new Array(height);\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        nodes[i] = new Array(width);\r\n        for (j = 0; j < width; ++j) {\r\n            nodes[i][j] = new Node(j, i);\r\n        }\r\n    }\r\n\r\n\r\n    if (matrix === undefined) {\r\n        return nodes;\r\n    }\r\n\r\n    if (matrix.length !== height || matrix[0].length !== width) {\r\n        throw new Error('Matrix size does not fit');\r\n    }\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        for (j = 0; j < width; ++j) {\r\n            if (matrix[i][j]) {\r\n                // 0, false, null will be walkable\r\n                // while others will be un-walkable\r\n                nodes[i][j].walkable = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return nodes;\r\n};\r\n\r\n\r\nGrid.prototype.getNodeAt = function(x, y) {\r\n    return this.nodes[y][x];\r\n};\r\n\r\n\r\n/**\r\n * Determine whether the node at the given position is walkable.\r\n * (Also returns false if the position is outside the grid.)\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @return {boolean} - The walkability of the node.\r\n */\r\nGrid.prototype.isWalkableAt = function(x, y) {\r\n    return this.isInside(x, y) && this.nodes[y][x].walkable;\r\n};\r\n\r\n\r\n/**\r\n * Determine whether the position is inside the grid.\r\n * XXX: `grid.isInside(x, y)` is wierd to read.\r\n * It should be `(x, y) is inside grid`, but I failed to find a better\r\n * name for this method.\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {boolean}\r\n */\r\nGrid.prototype.isInside = function(x, y) {\r\n    return (x >= 0 && x < this.width) && (y >= 0 && y < this.height);\r\n};\r\n\r\n\r\n/**\r\n * Set whether the node on the given position is walkable.\r\n * NOTE: throws exception if the coordinate is not inside the grid.\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @param {boolean} walkable - Whether the position is walkable.\r\n */\r\nGrid.prototype.setWalkableAt = function(x, y, walkable) {\r\n    this.nodes[y][x].walkable = walkable;\r\n};\r\n\r\n\r\n/**\r\n * Get the neighbors of the given node.\r\n *\r\n *     offsets      diagonalOffsets:\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 0 |   |    | 0 |   | 1 |\r\n *  +---+---+---+    +---+---+---+\r\n *  | 3 |   | 1 |    |   |   |   |\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 2 |   |    | 3 |   | 2 |\r\n *  +---+---+---+    +---+---+---+\r\n *\r\n *  When allowDiagonal is true, if offsets[i] is valid, then\r\n *  diagonalOffsets[i] and\r\n *  diagonalOffsets[(i + 1) % 4] is valid.\r\n * @param {Node} node\r\n * @param {DiagonalMovement} diagonalMovement\r\n */\r\nGrid.prototype.getNeighbors = function(node, diagonalMovement) {\r\n    var x = node.x,\r\n        y = node.y,\r\n        neighbors = [],\r\n        s0 = false, d0 = false,\r\n        s1 = false, d1 = false,\r\n        s2 = false, d2 = false,\r\n        s3 = false, d3 = false,\r\n        nodes = this.nodes;\r\n\r\n    // ↑\r\n    if (this.isWalkableAt(x, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x]);\r\n        s0 = true;\r\n    }\r\n    // →\r\n    if (this.isWalkableAt(x + 1, y)) {\r\n        neighbors.push(nodes[y][x + 1]);\r\n        s1 = true;\r\n    }\r\n    // ↓\r\n    if (this.isWalkableAt(x, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x]);\r\n        s2 = true;\r\n    }\r\n    // ←\r\n    if (this.isWalkableAt(x - 1, y)) {\r\n        neighbors.push(nodes[y][x - 1]);\r\n        s3 = true;\r\n    }\r\n\r\n    if (diagonalMovement === DiagonalMovement.Never) {\r\n        return neighbors;\r\n    }\r\n\r\n    if (diagonalMovement === DiagonalMovement.OnlyWhenNoObstacles) {\r\n        d0 = s3 && s0;\r\n        d1 = s0 && s1;\r\n        d2 = s1 && s2;\r\n        d3 = s2 && s3;\r\n    } else if (diagonalMovement === DiagonalMovement.IfAtMostOneObstacle) {\r\n        d0 = s3 || s0;\r\n        d1 = s0 || s1;\r\n        d2 = s1 || s2;\r\n        d3 = s2 || s3;\r\n    } else if (diagonalMovement === DiagonalMovement.Always) {\r\n        d0 = true;\r\n        d1 = true;\r\n        d2 = true;\r\n        d3 = true;\r\n    } else {\r\n        throw new Error('Incorrect value of diagonalMovement');\r\n    }\r\n\r\n    // ↖\r\n    if (d0 && this.isWalkableAt(x - 1, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x - 1]);\r\n    }\r\n    // ↗\r\n    if (d1 && this.isWalkableAt(x + 1, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x + 1]);\r\n    }\r\n    // ↘\r\n    if (d2 && this.isWalkableAt(x + 1, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x + 1]);\r\n    }\r\n    // ↙\r\n    if (d3 && this.isWalkableAt(x - 1, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x - 1]);\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\n\r\n/**\r\n * Get a clone of this grid.\r\n * @return {Grid} Cloned grid.\r\n */\r\nGrid.prototype.clone = function() {\r\n    var i, j,\r\n\r\n        width = this.width,\r\n        height = this.height,\r\n        thisNodes = this.nodes,\r\n\r\n        newGrid = new Grid(width, height),\r\n        newNodes = new Array(height);\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        newNodes[i] = new Array(width);\r\n        for (j = 0; j < width; ++j) {\r\n            newNodes[i][j] = new Node(j, i, thisNodes[i][j].walkable);\r\n        }\r\n    }\r\n\r\n    newGrid.nodes = newNodes;\r\n\r\n    return newGrid;\r\n};\r\n\r\nmodule.exports = Grid;\r\n","var DiagonalMovement = {\r\n    Always: 1,\r\n    Never: 2,\r\n    IfAtMostOneObstacle: 3,\r\n    OnlyWhenNoObstacles: 4\r\n};\r\n\r\nmodule.exports = DiagonalMovement;","/**\r\n * Backtrace according to the parent records and return the path.\r\n * (including both start and end nodes)\r\n * @param {Node} node End node\r\n * @return {Array<Array<number>>} the path\r\n */\r\nfunction backtrace(node) {\r\n    var path = [[node.x, node.y]];\r\n    while (node.parent) {\r\n        node = node.parent;\r\n        path.push([node.x, node.y]);\r\n    }\r\n    return path.reverse();\r\n}\r\nexports.backtrace = backtrace;\r\n\r\n/**\r\n * Backtrace from start and end node, and return the path.\r\n * (including both start and end nodes)\r\n * @param {Node}\r\n * @param {Node}\r\n */\r\nfunction biBacktrace(nodeA, nodeB) {\r\n    var pathA = backtrace(nodeA),\r\n        pathB = backtrace(nodeB);\r\n    return pathA.concat(pathB.reverse());\r\n}\r\nexports.biBacktrace = biBacktrace;\r\n\r\n/**\r\n * Compute the length of the path.\r\n * @param {Array<Array<number>>} path The path\r\n * @return {number} The length of the path\r\n */\r\nfunction pathLength(path) {\r\n    var i, sum = 0, a, b, dx, dy;\r\n    for (i = 1; i < path.length; ++i) {\r\n        a = path[i - 1];\r\n        b = path[i];\r\n        dx = a[0] - b[0];\r\n        dy = a[1] - b[1];\r\n        sum += Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n    return sum;\r\n}\r\nexports.pathLength = pathLength;\r\n\r\n\r\n/**\r\n * Given the start and end coordinates, return all the coordinates lying\r\n * on the line formed by these coordinates, based on Bresenham's algorithm.\r\n * http://en.wikipedia.org/wiki/Bresenham's_line_algorithm#Simplification\r\n * @param {number} x0 Start x coordinate\r\n * @param {number} y0 Start y coordinate\r\n * @param {number} x1 End x coordinate\r\n * @param {number} y1 End y coordinate\r\n * @return {Array<Array<number>>} The coordinates on the line\r\n */\r\nfunction interpolate(x0, y0, x1, y1) {\r\n    var abs = Math.abs,\r\n        line = [],\r\n        sx, sy, dx, dy, err, e2;\r\n\r\n    dx = abs(x1 - x0);\r\n    dy = abs(y1 - y0);\r\n\r\n    sx = (x0 < x1) ? 1 : -1;\r\n    sy = (y0 < y1) ? 1 : -1;\r\n\r\n    err = dx - dy;\r\n\r\n    while (true) {\r\n        line.push([x0, y0]);\r\n\r\n        if (x0 === x1 && y0 === y1) {\r\n            break;\r\n        }\r\n        \r\n        e2 = 2 * err;\r\n        if (e2 > -dy) {\r\n            err = err - dy;\r\n            x0 = x0 + sx;\r\n        }\r\n        if (e2 < dx) {\r\n            err = err + dx;\r\n            y0 = y0 + sy;\r\n        }\r\n    }\r\n\r\n    return line;\r\n}\r\nexports.interpolate = interpolate;\r\n\r\n\r\n/**\r\n * Given a compressed path, return a new path that has all the segments\r\n * in it interpolated.\r\n * @param {Array<Array<number>>} path The path\r\n * @return {Array<Array<number>>} expanded path\r\n */\r\nfunction expandPath(path) {\r\n    var expanded = [],\r\n        len = path.length,\r\n        coord0, coord1,\r\n        interpolated,\r\n        interpolatedLen,\r\n        i, j;\r\n\r\n    if (len < 2) {\r\n        return expanded;\r\n    }\r\n\r\n    for (i = 0; i < len - 1; ++i) {\r\n        coord0 = path[i];\r\n        coord1 = path[i + 1];\r\n\r\n        interpolated = interpolate(coord0[0], coord0[1], coord1[0], coord1[1]);\r\n        interpolatedLen = interpolated.length;\r\n        for (j = 0; j < interpolatedLen - 1; ++j) {\r\n            expanded.push(interpolated[j]);\r\n        }\r\n    }\r\n    expanded.push(path[len - 1]);\r\n\r\n    return expanded;\r\n}\r\nexports.expandPath = expandPath;\r\n\r\n\r\n/**\r\n * Smoothen the give path.\r\n * The original path will not be modified; a new path will be returned.\r\n * @param {PF.Grid} grid\r\n * @param {Array<Array<number>>} path The path\r\n */\r\nfunction smoothenPath(grid, path) {\r\n    var len = path.length,\r\n        x0 = path[0][0],        // path start x\r\n        y0 = path[0][1],        // path start y\r\n        x1 = path[len - 1][0],  // path end x\r\n        y1 = path[len - 1][1],  // path end y\r\n        sx, sy,                 // current start coordinate\r\n        ex, ey,                 // current end coordinate\r\n        newPath,\r\n        i, j, coord, line, testCoord, blocked;\r\n\r\n    sx = x0;\r\n    sy = y0;\r\n    newPath = [[sx, sy]];\r\n\r\n    for (i = 2; i < len; ++i) {\r\n        coord = path[i];\r\n        ex = coord[0];\r\n        ey = coord[1];\r\n        line = interpolate(sx, sy, ex, ey);\r\n\r\n        blocked = false;\r\n        for (j = 1; j < line.length; ++j) {\r\n            testCoord = line[j];\r\n\r\n            if (!grid.isWalkableAt(testCoord[0], testCoord[1])) {\r\n                blocked = true;\r\n                break;\r\n            }\r\n        }\r\n        if (blocked) {\r\n            lastValidCoord = path[i - 1];\r\n            newPath.push(lastValidCoord);\r\n            sx = lastValidCoord[0];\r\n            sy = lastValidCoord[1];\r\n        }\r\n    }\r\n    newPath.push([x1, y1]);\r\n\r\n    return newPath;\r\n}\r\nexports.smoothenPath = smoothenPath;\r\n\r\n\r\n/**\r\n * Compress a path, remove redundant nodes without altering the shape\r\n * The original path is not modified\r\n * @param {Array<Array<number>>} path The path\r\n * @return {Array<Array<number>>} The compressed path\r\n */\r\nfunction compressPath(path) {\r\n\r\n    // nothing to compress\r\n    if(path.length < 3) {\r\n        return path;\r\n    }\r\n\r\n    var compressed = [],\r\n        sx = path[0][0], // start x\r\n        sy = path[0][1], // start y\r\n        px = path[1][0], // second point x\r\n        py = path[1][1], // second point y\r\n        dx = px - sx, // direction between the two points\r\n        dy = py - sy, // direction between the two points\r\n        lx, ly,\r\n        ldx, ldy,\r\n        sq, i;\r\n\r\n    // normalize the direction\r\n    sq = Math.sqrt(dx*dx + dy*dy);\r\n    dx /= sq;\r\n    dy /= sq;\r\n\r\n    // start the new path\r\n    compressed.push([sx,sy]);\r\n\r\n    for(i = 2; i < path.length; i++) {\r\n\r\n        // store the last point\r\n        lx = px;\r\n        ly = py;\r\n\r\n        // store the last direction\r\n        ldx = dx;\r\n        ldy = dy;\r\n\r\n        // next point\r\n        px = path[i][0];\r\n        py = path[i][1];\r\n\r\n        // next direction\r\n        dx = px - lx;\r\n        dy = py - ly;\r\n\r\n        // normalize\r\n        sq = Math.sqrt(dx*dx + dy*dy);\r\n        dx /= sq;\r\n        dy /= sq;\r\n\r\n        // if the direction has changed, store the point\r\n        if ( dx !== ldx || dy !== ldy ) {\r\n            compressed.push([lx,ly]);\r\n        }\r\n    }\r\n\r\n    // store the last point\r\n    compressed.push([px,py]);\r\n\r\n    return compressed;\r\n}\r\nexports.compressPath = compressPath;\r\n","/**\r\n * @namespace PF.Heuristic\r\n * @description A collection of heuristic functions.\r\n */\r\nmodule.exports = {\r\n\r\n  /**\r\n   * Manhattan distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} dx + dy\r\n   */\r\n  manhattan: function(dx, dy) {\r\n      return dx + dy;\r\n  },\r\n\r\n  /**\r\n   * Euclidean distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} sqrt(dx * dx + dy * dy)\r\n   */\r\n  euclidean: function(dx, dy) {\r\n      return Math.sqrt(dx * dx + dy * dy);\r\n  },\r\n\r\n  /**\r\n   * Octile distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} sqrt(dx * dx + dy * dy) for grids\r\n   */\r\n  octile: function(dx, dy) {\r\n      var F = Math.SQRT2 - 1;\r\n      return (dx < dy) ? F * dx + dy : F * dy + dx;\r\n  },\r\n\r\n  /**\r\n   * Chebyshev distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} max(dx, dy)\r\n   */\r\n  chebyshev: function(dx, dy) {\r\n      return Math.max(dx, dy);\r\n  }\r\n\r\n};\r\n","var Heap       = require('heap');\r\nvar Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * A* path-finder. Based upon https://github.com/bgrins/javascript-astar\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching \r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n */\r\nfunction AStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    // When diagonal movement is allowed the manhattan heuristic is not\r\n    //admissible. It should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = new Heap(function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        }),\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        heuristic = this.heuristic,\r\n        diagonalMovement = this.diagonalMovement,\r\n        weight = this.weight,\r\n        abs = Math.abs, SQRT2 = Math.SQRT2,\r\n        node, neighbors, neighbor, i, l, x, y, ng;\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n\r\n    // push the start node into the open list\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the open list is not empty\r\n    while (!openList.empty()) {\r\n        // pop the position of node which has the minimum `f` value.\r\n        node = openList.pop();\r\n        node.closed = true;\r\n\r\n        // if reached the end position, construct the path and return it\r\n        if (node === endNode) {\r\n            return Util.backtrace(endNode);\r\n        }\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h || weight * heuristic(abs(x - endX), abs(y - endY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    openList.push(neighbor);\r\n                    neighbor.opened = true;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    openList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n    } // end while not open list empty\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = AStarFinder;\r\n","var AStarFinder = require('./AStarFinder');\r\n\r\n/**\r\n * Best-First-Search path-finder.\r\n * @constructor\r\n * @extends AStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n */\r\nfunction BestFirstFinder(opt) {\r\n    AStarFinder.call(this, opt);\r\n\r\n    var orig = this.heuristic;\r\n    this.heuristic = function(dx, dy) {\r\n        return orig(dx, dy) * 1000000;\r\n    };\r\n}\r\n\r\nBestFirstFinder.prototype = new AStarFinder();\r\nBestFirstFinder.prototype.constructor = BestFirstFinder;\r\n\r\nmodule.exports = BestFirstFinder;\r\n","var Util = require('../core/Util');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Breadth-First-Search path finder.\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction BreadthFirstFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nBreadthFirstFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = [],\r\n        diagonalMovement = this.diagonalMovement,\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        neighbors, neighbor, node, i, l;\r\n\r\n    // push the start pos into the queue\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the queue is not empty\r\n    while (openList.length) {\r\n        // take the front node from the queue\r\n        node = openList.shift();\r\n        node.closed = true;\r\n\r\n        // reached the end position\r\n        if (node === endNode) {\r\n            return Util.backtrace(endNode);\r\n        }\r\n\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            // skip this neighbor if it has been inspected before\r\n            if (neighbor.closed || neighbor.opened) {\r\n                continue;\r\n            }\r\n\r\n            openList.push(neighbor);\r\n            neighbor.opened = true;\r\n            neighbor.parent = node;\r\n        }\r\n    }\r\n    \r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = BreadthFirstFinder;\r\n","var AStarFinder = require('./AStarFinder');\r\n\r\n/**\r\n * Dijkstra path-finder.\r\n * @constructor\r\n * @extends AStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction DijkstraFinder(opt) {\r\n    AStarFinder.call(this, opt);\r\n    this.heuristic = function(dx, dy) {\r\n        return 0;\r\n    };\r\n}\r\n\r\nDijkstraFinder.prototype = new AStarFinder();\r\nDijkstraFinder.prototype.constructor = DijkstraFinder;\r\n\r\nmodule.exports = DijkstraFinder;\r\n","var Heap       = require('heap');\r\nvar Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * A* path-finder.\r\n * based upon https://github.com/bgrins/javascript-astar\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n */\r\nfunction BiAStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    //When diagonal movement is allowed the manhattan heuristic is not admissible\r\n    //It should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nBiAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var cmp = function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        },\r\n        startOpenList = new Heap(cmp),\r\n        endOpenList = new Heap(cmp),\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        heuristic = this.heuristic,\r\n        diagonalMovement = this.diagonalMovement,\r\n        weight = this.weight,\r\n        abs = Math.abs, SQRT2 = Math.SQRT2,\r\n        node, neighbors, neighbor, i, l, x, y, ng,\r\n        BY_START = 1, BY_END = 2;\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    // and push it into the start open list\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n    startOpenList.push(startNode);\r\n    startNode.opened = BY_START;\r\n\r\n    // set the `g` and `f` value of the end node to be 0\r\n    // and push it into the open open list\r\n    endNode.g = 0;\r\n    endNode.f = 0;\r\n    endOpenList.push(endNode);\r\n    endNode.opened = BY_END;\r\n\r\n    // while both the open lists are not empty\r\n    while (!startOpenList.empty() && !endOpenList.empty()) {\r\n\r\n        // pop the position of start node which has the minimum `f` value.\r\n        node = startOpenList.pop();\r\n        node.closed = true;\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened === BY_END) {\r\n                return Util.biBacktrace(node, neighbor);\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h ||\r\n                    weight * heuristic(abs(x - endX), abs(y - endY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    startOpenList.push(neighbor);\r\n                    neighbor.opened = BY_START;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    startOpenList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n\r\n\r\n        // pop the position of end node which has the minimum `f` value.\r\n        node = endOpenList.pop();\r\n        node.closed = true;\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened === BY_START) {\r\n                return Util.biBacktrace(neighbor, node);\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h ||\r\n                    weight * heuristic(abs(x - startX), abs(y - startY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    endOpenList.push(neighbor);\r\n                    neighbor.opened = BY_END;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    endOpenList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n    } // end while not open list empty\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = BiAStarFinder;\r\n","var BiAStarFinder = require('./BiAStarFinder');\r\n\r\n/**\r\n * Bi-direcitional Best-First-Search path-finder.\r\n * @constructor\r\n * @extends BiAStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n */\r\nfunction BiBestFirstFinder(opt) {\r\n    BiAStarFinder.call(this, opt);\r\n\r\n    var orig = this.heuristic;\r\n    this.heuristic = function(dx, dy) {\r\n        return orig(dx, dy) * 1000000;\r\n    };\r\n}\r\n\r\nBiBestFirstFinder.prototype = new BiAStarFinder();\r\nBiBestFirstFinder.prototype.constructor = BiBestFirstFinder;\r\n\r\nmodule.exports = BiBestFirstFinder;\r\n","var Util = require('../core/Util');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Bi-directional Breadth-First-Search path finder.\r\n * @constructor\r\n * @param {object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction BiBreadthFirstFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nBiBreadthFirstFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        startOpenList = [], endOpenList = [],\r\n        neighbors, neighbor, node,\r\n        diagonalMovement = this.diagonalMovement,\r\n        BY_START = 0, BY_END = 1,\r\n        i, l;\r\n\r\n    // push the start and end nodes into the queues\r\n    startOpenList.push(startNode);\r\n    startNode.opened = true;\r\n    startNode.by = BY_START;\r\n\r\n    endOpenList.push(endNode);\r\n    endNode.opened = true;\r\n    endNode.by = BY_END;\r\n\r\n    // while both the queues are not empty\r\n    while (startOpenList.length && endOpenList.length) {\r\n\r\n        // expand start open list\r\n\r\n        node = startOpenList.shift();\r\n        node.closed = true;\r\n\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened) {\r\n                // if this node has been inspected by the reversed search,\r\n                // then a path is found.\r\n                if (neighbor.by === BY_END) {\r\n                    return Util.biBacktrace(node, neighbor);\r\n                }\r\n                continue;\r\n            }\r\n            startOpenList.push(neighbor);\r\n            neighbor.parent = node;\r\n            neighbor.opened = true;\r\n            neighbor.by = BY_START;\r\n        }\r\n\r\n        // expand end open list\r\n\r\n        node = endOpenList.shift();\r\n        node.closed = true;\r\n\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened) {\r\n                if (neighbor.by === BY_START) {\r\n                    return Util.biBacktrace(neighbor, node);\r\n                }\r\n                continue;\r\n            }\r\n            endOpenList.push(neighbor);\r\n            neighbor.parent = node;\r\n            neighbor.opened = true;\r\n            neighbor.by = BY_END;\r\n        }\r\n    }\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = BiBreadthFirstFinder;\r\n","var BiAStarFinder = require('./BiAStarFinder');\r\n\r\n/**\r\n * Bi-directional Dijkstra path-finder.\r\n * @constructor\r\n * @extends BiAStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction BiDijkstraFinder(opt) {\r\n    BiAStarFinder.call(this, opt);\r\n    this.heuristic = function(dx, dy) {\r\n        return 0;\r\n    };\r\n}\r\n\r\nBiDijkstraFinder.prototype = new BiAStarFinder();\r\nBiDijkstraFinder.prototype.constructor = BiDijkstraFinder;\r\n\r\nmodule.exports = BiDijkstraFinder;\r\n","var Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar Node       = require('../core/Node');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Iterative Deeping A Star (IDA*) path-finder.\r\n *\r\n * Recursion based on:\r\n *   http://www.apl.jhu.edu/~hall/AI-Programming/IDA-Star.html\r\n *\r\n * Path retracing based on:\r\n *  V. Nageshwara Rao, Vipin Kumar and K. Ramesh\r\n *  \"A Parallel Implementation of Iterative-Deeping-A*\", January 1987.\r\n *  ftp://ftp.cs.utexas.edu/.snapshot/hourly.1/pub/AI-Lab/tech-reports/UT-AI-TR-87-46.pdf\r\n *\r\n * @author Gerard Meier (www.gerardmeier.com)\r\n *\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n * @param {boolean} opt.trackRecursion Whether to track recursion for\r\n *     statistical purposes.\r\n * @param {number} opt.timeLimit Maximum execution time. Use <= 0 for infinite.\r\n */\r\nfunction IDAStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n    this.trackRecursion = opt.trackRecursion || false;\r\n    this.timeLimit = opt.timeLimit || Infinity; // Default: no time limit.\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    // When diagonal movement is allowed the manhattan heuristic is not\r\n    // admissible, it should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path. When an empty array is returned, either\r\n * no path is possible, or the maximum execution time is reached.\r\n *\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nIDAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    // Used for statistics:\r\n    var nodesVisited = 0;\r\n\r\n    // Execution time limitation:\r\n    var startTime = new Date().getTime();\r\n\r\n    // Heuristic helper:\r\n    var h = function(a, b) {\r\n        return this.heuristic(Math.abs(b.x - a.x), Math.abs(b.y - a.y));\r\n    }.bind(this);\r\n\r\n    // Step cost from a to b:\r\n    var cost = function(a, b) {\r\n        return (a.x === b.x || a.y === b.y) ? 1 : Math.SQRT2;\r\n    };\r\n\r\n    /**\r\n     * IDA* search implementation.\r\n     *\r\n     * @param {Node} The node currently expanding from.\r\n     * @param {number} Cost to reach the given node.\r\n     * @param {number} Maximum search depth (cut-off value).\r\n     * @param {Array<Array<number>>} The found route.\r\n     * @param {number} Recursion depth.\r\n     *\r\n     * @return {Object} either a number with the new optimal cut-off depth,\r\n     * or a valid node instance, in which case a path was found.\r\n     */\r\n    var search = function(node, g, cutoff, route, depth) {\r\n        nodesVisited++;\r\n\r\n        // Enforce timelimit:\r\n        if (this.timeLimit > 0 &&\r\n            new Date().getTime() - startTime > this.timeLimit * 1000) {\r\n            // Enforced as \"path-not-found\".\r\n            return Infinity;\r\n        }\r\n\r\n        var f = g + h(node, end) * this.weight;\r\n\r\n        // We've searched too deep for this iteration.\r\n        if (f > cutoff) {\r\n            return f;\r\n        }\r\n\r\n        if (node == end) {\r\n            route[depth] = [node.x, node.y];\r\n            return node;\r\n        }\r\n\r\n        var min, t, k, neighbour;\r\n\r\n        var neighbours = grid.getNeighbors(node, this.diagonalMovement);\r\n\r\n        // Sort the neighbours, gives nicer paths. But, this deviates\r\n        // from the original algorithm - so I left it out.\r\n        //neighbours.sort(function(a, b){\r\n        //    return h(a, end) - h(b, end);\r\n        //});\r\n\r\n        \r\n        /*jshint -W084 *///Disable warning: Expected a conditional expression and instead saw an assignment\r\n        for (k = 0, min = Infinity; neighbour = neighbours[k]; ++k) {\r\n        /*jshint +W084 *///Enable warning: Expected a conditional expression and instead saw an assignment\r\n            if (this.trackRecursion) {\r\n                // Retain a copy for visualisation. Due to recursion, this\r\n                // node may be part of other paths too.\r\n                neighbour.retainCount = neighbour.retainCount + 1 || 1;\r\n\r\n                if(neighbour.tested !== true) {\r\n                    neighbour.tested = true;\r\n                }\r\n            }\r\n\r\n            t = search(neighbour, g + cost(node, neighbour), cutoff, route, depth + 1);\r\n\r\n            if (t instanceof Node) {\r\n                route[depth] = [node.x, node.y];\r\n\r\n                // For a typical A* linked list, this would work:\r\n                // neighbour.parent = node;\r\n                return t;\r\n            }\r\n\r\n            // Decrement count, then determine whether it's actually closed.\r\n            if (this.trackRecursion && (--neighbour.retainCount) === 0) {\r\n                neighbour.tested = false;\r\n            }\r\n\r\n            if (t < min) {\r\n                min = t;\r\n            }\r\n        }\r\n\r\n        return min;\r\n\r\n    }.bind(this);\r\n\r\n    // Node instance lookups:\r\n    var start = grid.getNodeAt(startX, startY);\r\n    var end   = grid.getNodeAt(endX, endY);\r\n\r\n    // Initial search depth, given the typical heuristic contraints,\r\n    // there should be no cheaper route possible.\r\n    var cutOff = h(start, end);\r\n\r\n    var j, route, t;\r\n\r\n    // With an overflow protection.\r\n    for (j = 0; true; ++j) {\r\n\r\n        route = [];\r\n\r\n        // Search till cut-off depth:\r\n        t = search(start, 0, cutOff, route, 0);\r\n\r\n        // Route not possible, or not found in time limit.\r\n        if (t === Infinity) {\r\n            return [];\r\n        }\r\n\r\n        // If t is a node, it's also the end node. Route is now\r\n        // populated with a valid path to the end node.\r\n        if (t instanceof Node) {\r\n            return route;\r\n        }\r\n\r\n        // Try again, this time with a deeper cut-off. The t score\r\n        // is the closest we got to the end node.\r\n        cutOff = t;\r\n    }\r\n\r\n    // This _should_ never to be reached.\r\n    return [];\r\n};\r\n\r\nmodule.exports = IDAStarFinder;\r\n","/**\r\n * @author aniero / https://github.com/aniero\r\n */\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\nvar JPFNeverMoveDiagonally = require('./JPFNeverMoveDiagonally');\r\nvar JPFAlwaysMoveDiagonally = require('./JPFAlwaysMoveDiagonally');\r\nvar JPFMoveDiagonallyIfNoObstacles = require('./JPFMoveDiagonallyIfNoObstacles');\r\nvar JPFMoveDiagonallyIfAtMostOneObstacle = require('./JPFMoveDiagonallyIfAtMostOneObstacle');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm\r\n * @param {Object} opt\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {DiagonalMovement} opt.diagonalMovement Condition under which diagonal\r\n *      movement will be allowed.\r\n */\r\nfunction JumpPointFinder(opt) {\r\n    opt = opt || {};\r\n    if (opt.diagonalMovement === DiagonalMovement.Never) {\r\n        return new JPFNeverMoveDiagonally(opt);\r\n    } else if (opt.diagonalMovement === DiagonalMovement.Always) {\r\n        return new JPFAlwaysMoveDiagonally(opt);\r\n    } else if (opt.diagonalMovement === DiagonalMovement.OnlyWhenNoObstacles) {\r\n        return new JPFMoveDiagonallyIfNoObstacles(opt);\r\n    } else {\r\n        return new JPFMoveDiagonallyIfAtMostOneObstacle(opt);\r\n    }\r\n}\r\n\r\nmodule.exports = JumpPointFinder;\r\n","/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = require('./JumpPointFinderBase');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm allowing only horizontal\r\n * or vertical movements.\r\n */\r\nfunction JPFNeverMoveDiagonally(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFNeverMoveDiagonally.prototype = new JumpPointFinderBase();\r\nJPFNeverMoveDiagonally.prototype.constructor = JPFNeverMoveDiagonally;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFNeverMoveDiagonally.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    if (dx !== 0) {\r\n        if ((grid.isWalkableAt(x, y - 1) && !grid.isWalkableAt(x - dx, y - 1)) ||\r\n            (grid.isWalkableAt(x, y + 1) && !grid.isWalkableAt(x - dx, y + 1))) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    else if (dy !== 0) {\r\n        if ((grid.isWalkableAt(x - 1, y) && !grid.isWalkableAt(x - 1, y - dy)) ||\r\n            (grid.isWalkableAt(x + 1, y) && !grid.isWalkableAt(x + 1, y - dy))) {\r\n            return [x, y];\r\n        }\r\n        //When moving vertically, must check for horizontal jump points\r\n        if (this._jump(x + 1, y, x, y) || this._jump(x - 1, y, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    else {\r\n        throw new Error(\"Only horizontal and vertical movements are allowed\");\r\n    }\r\n\r\n    return this._jump(x + dx, y + dy, x, y);\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFNeverMoveDiagonally.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        if (dx !== 0) {\r\n            if (grid.isWalkableAt(x, y - 1)) {\r\n                neighbors.push([x, y - 1]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + 1)) {\r\n                neighbors.push([x, y + 1]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n        }\r\n        else if (dy !== 0) {\r\n            if (grid.isWalkableAt(x - 1, y)) {\r\n                neighbors.push([x - 1, y]);\r\n            }\r\n            if (grid.isWalkableAt(x + 1, y)) {\r\n                neighbors.push([x + 1, y]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.Never);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFNeverMoveDiagonally;\r\n","/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar Heap       = require('heap');\r\nvar Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Base class for the Jump Point Search algorithm\r\n * @param {object} opt\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n */\r\nfunction JumpPointFinderBase(opt) {\r\n    opt = opt || {};\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.trackJumpRecursion = opt.trackJumpRecursion || false;\r\n}\r\n\r\n/**\r\n * Find and return the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nJumpPointFinderBase.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = this.openList = new Heap(function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        }),\r\n        startNode = this.startNode = grid.getNodeAt(startX, startY),\r\n        endNode = this.endNode = grid.getNodeAt(endX, endY), node;\r\n\r\n    this.grid = grid;\r\n\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n\r\n    // push the start node into the open list\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the open list is not empty\r\n    while (!openList.empty()) {\r\n        // pop the position of node which has the minimum `f` value.\r\n        node = openList.pop();\r\n        node.closed = true;\r\n\r\n        if (node === endNode) {\r\n            return Util.expandPath(Util.backtrace(endNode));\r\n        }\r\n\r\n        this._identifySuccessors(node);\r\n    }\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\n/**\r\n * Identify successors for the given node. Runs a jump point search in the\r\n * direction of each available neighbor, adding any points found to the open\r\n * list.\r\n * @protected\r\n */\r\nJumpPointFinderBase.prototype._identifySuccessors = function(node) {\r\n    var grid = this.grid,\r\n        heuristic = this.heuristic,\r\n        openList = this.openList,\r\n        endX = this.endNode.x,\r\n        endY = this.endNode.y,\r\n        neighbors, neighbor,\r\n        jumpPoint, i, l,\r\n        x = node.x, y = node.y,\r\n        jx, jy, dx, dy, d, ng, jumpNode,\r\n        abs = Math.abs, max = Math.max;\r\n\r\n    neighbors = this._findNeighbors(node);\r\n    for(i = 0, l = neighbors.length; i < l; ++i) {\r\n        neighbor = neighbors[i];\r\n        jumpPoint = this._jump(neighbor[0], neighbor[1], x, y);\r\n        if (jumpPoint) {\r\n\r\n            jx = jumpPoint[0];\r\n            jy = jumpPoint[1];\r\n            jumpNode = grid.getNodeAt(jx, jy);\r\n\r\n            if (jumpNode.closed) {\r\n                continue;\r\n            }\r\n\r\n            // include distance, as parent may not be immediately adjacent:\r\n            d = Heuristic.octile(abs(jx - x), abs(jy - y));\r\n            ng = node.g + d; // next `g` value\r\n\r\n            if (!jumpNode.opened || ng < jumpNode.g) {\r\n                jumpNode.g = ng;\r\n                jumpNode.h = jumpNode.h || heuristic(abs(jx - endX), abs(jy - endY));\r\n                jumpNode.f = jumpNode.g + jumpNode.h;\r\n                jumpNode.parent = node;\r\n\r\n                if (!jumpNode.opened) {\r\n                    openList.push(jumpNode);\r\n                    jumpNode.opened = true;\r\n                } else {\r\n                    openList.updateItem(jumpNode);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = JumpPointFinderBase;\r\n","/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = require('./JumpPointFinderBase');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm which always moves\r\n * diagonally irrespective of the number of obstacles.\r\n */\r\nfunction JPFAlwaysMoveDiagonally(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFAlwaysMoveDiagonally.prototype = new JumpPointFinderBase();\r\nJPFAlwaysMoveDiagonally.prototype.constructor = JPFAlwaysMoveDiagonally;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFAlwaysMoveDiagonally.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    // check for forced neighbors\r\n    // along the diagonal\r\n    if (dx !== 0 && dy !== 0) {\r\n        if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||\r\n            (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {\r\n            return [x, y];\r\n        }\r\n        // when moving diagonally, must check for vertical/horizontal jump points\r\n        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    // horizontally/vertically\r\n    else {\r\n        if( dx !== 0 ) { // moving along x\r\n            if((grid.isWalkableAt(x + dx, y + 1) && !grid.isWalkableAt(x, y + 1)) ||\r\n               (grid.isWalkableAt(x + dx, y - 1) && !grid.isWalkableAt(x, y - 1))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n        else {\r\n            if((grid.isWalkableAt(x + 1, y + dy) && !grid.isWalkableAt(x + 1, y)) ||\r\n               (grid.isWalkableAt(x - 1, y + dy) && !grid.isWalkableAt(x - 1, y))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n    }\r\n\r\n    return this._jump(x + dx, y + dy, x, y);\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFAlwaysMoveDiagonally.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        // search diagonally\r\n        if (dx !== 0 && dy !== 0) {\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y + dy)) {\r\n                neighbors.push([x + dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x - dx, y)) {\r\n                neighbors.push([x - dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x, y - dy)) {\r\n                neighbors.push([x + dx, y - dy]);\r\n            }\r\n        }\r\n        // search horizontally/vertically\r\n        else {\r\n            if(dx === 0) {\r\n                if (grid.isWalkableAt(x, y + dy)) {\r\n                    neighbors.push([x, y + dy]);\r\n                }\r\n                if (!grid.isWalkableAt(x + 1, y)) {\r\n                    neighbors.push([x + 1, y + dy]);\r\n                }\r\n                if (!grid.isWalkableAt(x - 1, y)) {\r\n                    neighbors.push([x - 1, y + dy]);\r\n                }\r\n            }\r\n            else {\r\n                if (grid.isWalkableAt(x + dx, y)) {\r\n                    neighbors.push([x + dx, y]);\r\n                }\r\n                if (!grid.isWalkableAt(x, y + 1)) {\r\n                    neighbors.push([x + dx, y + 1]);\r\n                }\r\n                if (!grid.isWalkableAt(x, y - 1)) {\r\n                    neighbors.push([x + dx, y - 1]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.Always);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFAlwaysMoveDiagonally;\r\n","/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = require('./JumpPointFinderBase');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm which moves\r\n * diagonally only when there are no obstacles.\r\n */\r\nfunction JPFMoveDiagonallyIfNoObstacles(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFMoveDiagonallyIfNoObstacles.prototype = new JumpPointFinderBase();\r\nJPFMoveDiagonallyIfNoObstacles.prototype.constructor = JPFMoveDiagonallyIfNoObstacles;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFMoveDiagonallyIfNoObstacles.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    // check for forced neighbors\r\n    // along the diagonal\r\n    if (dx !== 0 && dy !== 0) {\r\n        // if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||\r\n            // (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {\r\n            // return [x, y];\r\n        // }\r\n        // when moving diagonally, must check for vertical/horizontal jump points\r\n        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    // horizontally/vertically\r\n    else {\r\n        if (dx !== 0) {\r\n            if ((grid.isWalkableAt(x, y - 1) && !grid.isWalkableAt(x - dx, y - 1)) ||\r\n                (grid.isWalkableAt(x, y + 1) && !grid.isWalkableAt(x - dx, y + 1))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n        else if (dy !== 0) {\r\n            if ((grid.isWalkableAt(x - 1, y) && !grid.isWalkableAt(x - 1, y - dy)) ||\r\n                (grid.isWalkableAt(x + 1, y) && !grid.isWalkableAt(x + 1, y - dy))) {\r\n                return [x, y];\r\n            }\r\n            // When moving vertically, must check for horizontal jump points\r\n            // if (this._jump(x + 1, y, x, y) || this._jump(x - 1, y, x, y)) {\r\n                // return [x, y];\r\n            // }\r\n        }\r\n    }\r\n\r\n    // moving diagonally, must make sure one of the vertical/horizontal\r\n    // neighbors is open to allow the path\r\n    if (grid.isWalkableAt(x + dx, y) && grid.isWalkableAt(x, y + dy)) {\r\n        return this._jump(x + dx, y + dy, x, y);\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFMoveDiagonallyIfNoObstacles.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        // search diagonally\r\n        if (dx !== 0 && dy !== 0) {\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + dy) && grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y + dy]);\r\n            }\r\n        }\r\n        // search horizontally/vertically\r\n        else {\r\n            var isNextWalkable;\r\n            if (dx !== 0) {\r\n                isNextWalkable = grid.isWalkableAt(x + dx, y);\r\n                var isTopWalkable = grid.isWalkableAt(x, y + 1);\r\n                var isBottomWalkable = grid.isWalkableAt(x, y - 1);\r\n\r\n                if (isNextWalkable) {\r\n                    neighbors.push([x + dx, y]);\r\n                    if (isTopWalkable) {\r\n                        neighbors.push([x + dx, y + 1]);\r\n                    }\r\n                    if (isBottomWalkable) {\r\n                        neighbors.push([x + dx, y - 1]);\r\n                    }\r\n                }\r\n                if (isTopWalkable) {\r\n                    neighbors.push([x, y + 1]);\r\n                }\r\n                if (isBottomWalkable) {\r\n                    neighbors.push([x, y - 1]);\r\n                }\r\n            }\r\n            else if (dy !== 0) {\r\n                isNextWalkable = grid.isWalkableAt(x, y + dy);\r\n                var isRightWalkable = grid.isWalkableAt(x + 1, y);\r\n                var isLeftWalkable = grid.isWalkableAt(x - 1, y);\r\n\r\n                if (isNextWalkable) {\r\n                    neighbors.push([x, y + dy]);\r\n                    if (isRightWalkable) {\r\n                        neighbors.push([x + 1, y + dy]);\r\n                    }\r\n                    if (isLeftWalkable) {\r\n                        neighbors.push([x - 1, y + dy]);\r\n                    }\r\n                }\r\n                if (isRightWalkable) {\r\n                    neighbors.push([x + 1, y]);\r\n                }\r\n                if (isLeftWalkable) {\r\n                    neighbors.push([x - 1, y]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.OnlyWhenNoObstacles);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFMoveDiagonallyIfNoObstacles;\r\n","/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = require('./JumpPointFinderBase');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm which moves\r\n * diagonally only when there is at most one obstacle.\r\n */\r\nfunction JPFMoveDiagonallyIfAtMostOneObstacle(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype = new JumpPointFinderBase();\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype.constructor = JPFMoveDiagonallyIfAtMostOneObstacle;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    // check for forced neighbors\r\n    // along the diagonal\r\n    if (dx !== 0 && dy !== 0) {\r\n        if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||\r\n            (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {\r\n            return [x, y];\r\n        }\r\n        // when moving diagonally, must check for vertical/horizontal jump points\r\n        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    // horizontally/vertically\r\n    else {\r\n        if( dx !== 0 ) { // moving along x\r\n            if((grid.isWalkableAt(x + dx, y + 1) && !grid.isWalkableAt(x, y + 1)) ||\r\n               (grid.isWalkableAt(x + dx, y - 1) && !grid.isWalkableAt(x, y - 1))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n        else {\r\n            if((grid.isWalkableAt(x + 1, y + dy) && !grid.isWalkableAt(x + 1, y)) ||\r\n               (grid.isWalkableAt(x - 1, y + dy) && !grid.isWalkableAt(x - 1, y))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n    }\r\n\r\n    // moving diagonally, must make sure one of the vertical/horizontal\r\n    // neighbors is open to allow the path\r\n    if (grid.isWalkableAt(x + dx, y) || grid.isWalkableAt(x, y + dy)) {\r\n        return this._jump(x + dx, y + dy, x, y);\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        // search diagonally\r\n        if (dx !== 0 && dy !== 0) {\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + dy) || grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x - dx, y) && grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x - dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x, y - dy) && grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y - dy]);\r\n            }\r\n        }\r\n        // search horizontally/vertically\r\n        else {\r\n            if(dx === 0) {\r\n                if (grid.isWalkableAt(x, y + dy)) {\r\n                    neighbors.push([x, y + dy]);\r\n                    if (!grid.isWalkableAt(x + 1, y)) {\r\n                        neighbors.push([x + 1, y + dy]);\r\n                    }\r\n                    if (!grid.isWalkableAt(x - 1, y)) {\r\n                        neighbors.push([x - 1, y + dy]);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (grid.isWalkableAt(x + dx, y)) {\r\n                    neighbors.push([x + dx, y]);\r\n                    if (!grid.isWalkableAt(x, y + 1)) {\r\n                        neighbors.push([x + dx, y + 1]);\r\n                    }\r\n                    if (!grid.isWalkableAt(x, y - 1)) {\r\n                        neighbors.push([x + dx, y - 1]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.IfAtMostOneObstacle);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFMoveDiagonallyIfAtMostOneObstacle;\r\n","module.exports = require('./helpers/bundle-url').getBundleURL('9s24z') + \"../ground.0c9a3e86.png\";","\"use strict\";\n\nvar bundleURL = {};\n\nfunction getBundleURLCached(id) {\n  var value = bundleURL[id];\n\n  if (!value) {\n    value = getBundleURL();\n    bundleURL[id] = value;\n  }\n\n  return value;\n}\n\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      // The first two stack frames will be this function and getBundleURLCached.\n      // Use the 3rd one, which will be a runtime in the original bundle.\n      return getBaseURL(matches[2]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\n\n\nfunction getOrigin(url) {\n  var matches = ('' + url).match(/(https?|file|ftp):\\/\\/[^/]+/);\n\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n\n  return matches[0];\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","module.exports = require('./helpers/bundle-url').getBundleURL('9s24z') + \"../knight.f10f2386.png\";","module.exports = require('./helpers/bundle-url').getBundleURL('9s24z') + \"../bishop.d830fe9f.png\";","module.exports = require('./helpers/bundle-url').getBundleURL('9s24z') + \"../bishop-odd.ea5c6841.png\";","module.exports = require('./helpers/bundle-url').getBundleURL('9s24z') + \"../princhess.76be2901.png\";","exports.interopDefault = function(a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function(source, dest) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    // Skip duplicate re-exports when they have the same value.\n    if (key in dest && dest[key] === source[key]) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function(dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":[],"version":3,"file":"index.0cfec7fc.js.map","sourceRoot":"/__parcel_source_root/"}