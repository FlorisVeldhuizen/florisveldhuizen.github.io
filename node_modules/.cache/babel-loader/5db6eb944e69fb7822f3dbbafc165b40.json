{"ast":null,"code":"'use strict';\n/* eslint global-require: 0 */\n// the code is structured this way so that bundlers can\n// alias out `has-symbols` to `() => true` or `() => false` if your target\n// environments' Symbol capabilities are known, and then use\n// dead code elimination on the rest of this module.\n//\n// Similarly, `isarray` can be aliased to `Array.isArray` if\n// available in all target environments.\n\nvar isArguments = require('is-arguments');\n\nif (require('has-symbols')() || require('has-symbols/shams')()) {\n  var $iterator = Symbol.iterator; // Symbol is available natively or shammed\n  // natively:\n  //  - Chrome >= 38\n  //  - Edge 12-14?, Edge >= 15 for sure\n  //  - FF >= 36\n  //  - Safari >= 9\n  //  - node >= 0.12\n\n  module.exports = function getIterator(iterable) {\n    // alternatively, `iterable[$iterator]?.()`\n    if (iterable != null && typeof iterable[$iterator] !== 'undefined') {\n      return iterable[$iterator]();\n    }\n\n    if (isArguments(iterable)) {\n      // arguments objects lack Symbol.iterator\n      // - node 0.12\n      return Array.prototype[$iterator].call(iterable);\n    }\n  };\n} else {\n  // Symbol is not available, native or shammed\n  var isArray = require('isarray');\n\n  var isString = require('is-string');\n\n  var GetIntrinsic = require('get-intrinsic');\n\n  var $Map = GetIntrinsic('%Map%', true);\n  var $Set = GetIntrinsic('%Set%', true);\n\n  var callBound = require('call-bind/callBound');\n\n  var $arrayPush = callBound('Array.prototype.push');\n  var $charCodeAt = callBound('String.prototype.charCodeAt');\n  var $stringSlice = callBound('String.prototype.slice');\n\n  var advanceStringIndex = function advanceStringIndex(S, index) {\n    var length = S.length;\n\n    if (index + 1 >= length) {\n      return index + 1;\n    }\n\n    var first = $charCodeAt(S, index);\n\n    if (first < 0xD800 || first > 0xDBFF) {\n      return index + 1;\n    }\n\n    var second = $charCodeAt(S, index + 1);\n\n    if (second < 0xDC00 || second > 0xDFFF) {\n      return index + 1;\n    }\n\n    return index + 2;\n  };\n\n  var getArrayIterator = function getArrayIterator(arraylike) {\n    var i = 0;\n    return {\n      next: function next() {\n        var done = i >= arraylike.length;\n        var value;\n\n        if (!done) {\n          value = arraylike[i];\n          i += 1;\n        }\n\n        return {\n          done: done,\n          value: value\n        };\n      }\n    };\n  };\n\n  var getNonCollectionIterator = function getNonCollectionIterator(iterable, noPrimordialCollections) {\n    if (isArray(iterable) || isArguments(iterable)) {\n      return getArrayIterator(iterable);\n    }\n\n    if (isString(iterable)) {\n      var i = 0;\n      return {\n        next: function next() {\n          var nextIndex = advanceStringIndex(iterable, i);\n          var value = $stringSlice(iterable, i, nextIndex);\n          i = nextIndex;\n          return {\n            done: nextIndex > iterable.length,\n            value: value\n          };\n        }\n      };\n    } // es6-shim and es-shims' es-map use a string \"_es6-shim iterator_\" property on different iterables, such as MapIterator.\n\n\n    if (noPrimordialCollections && typeof iterable['_es6-shim iterator_'] !== 'undefined') {\n      return iterable['_es6-shim iterator_']();\n    }\n  };\n\n  if (!$Map && !$Set) {\n    // the only language iterables are Array, String, arguments\n    // - Safari <= 6.0\n    // - Chrome < 38\n    // - node < 0.12\n    // - FF < 13\n    // - IE < 11\n    // - Edge < 11\n    module.exports = function getIterator(iterable) {\n      if (iterable != null) {\n        return getNonCollectionIterator(iterable, true);\n      }\n    };\n  } else {\n    // either Map or Set are available, but Symbol is not\n    // - es6-shim on an ES5 browser\n    // - Safari 6.2 (maybe 6.1?)\n    // - FF v[13, 36)\n    // - IE 11\n    // - Edge 11\n    // - Safari v[6, 9)\n    var isMap = require('is-map');\n\n    var isSet = require('is-set'); // Firefox >= 27, IE 11, Safari 6.2 - 9, Edge 11, es6-shim in older envs, all have forEach\n\n\n    var $mapForEach = callBound('Map.prototype.forEach', true);\n    var $setForEach = callBound('Set.prototype.forEach', true);\n\n    if (typeof process === 'undefined' || !process.versions || !process.versions.node) {\n      // \"if is not node\"\n      // Firefox 17 - 26 has `.iterator()`, whose iterator `.next()` either\n      // returns a value, or throws a StopIteration object. These browsers\n      // do not have any other mechanism for iteration.\n      var $mapIterator = callBound('Map.prototype.iterator', true);\n      var $setIterator = callBound('Set.prototype.iterator', true);\n\n      var getStopIterationIterator = function (iterator) {\n        var done = false;\n        return {\n          next: function next() {\n            try {\n              return {\n                done: done,\n                value: done ? undefined : iterator.next()\n              };\n            } catch (e) {\n              done = true;\n              return {\n                done: true,\n                value: undefined\n              };\n            }\n          }\n        };\n      };\n    } // Firefox 27-35, and some older es6-shim versions, use a string \"@@iterator\" property\n    // this returns a proper iterator object, so we should use it instead of forEach.\n    // newer es6-shim versions use a string \"_es6-shim iterator_\" property.\n\n\n    var $mapAtAtIterator = callBound('Map.prototype.@@iterator', true) || callBound('Map.prototype._es6-shim iterator_', true);\n    var $setAtAtIterator = callBound('Set.prototype.@@iterator', true) || callBound('Set.prototype._es6-shim iterator_', true);\n\n    var getCollectionIterator = function getCollectionIterator(iterable) {\n      if (isMap(iterable)) {\n        if ($mapIterator) {\n          return getStopIterationIterator($mapIterator(iterable));\n        }\n\n        if ($mapAtAtIterator) {\n          return $mapAtAtIterator(iterable);\n        }\n\n        if ($mapForEach) {\n          var entries = [];\n          $mapForEach(iterable, function (v, k) {\n            $arrayPush(entries, [k, v]);\n          });\n          return getArrayIterator(entries);\n        }\n      }\n\n      if (isSet(iterable)) {\n        if ($setIterator) {\n          return getStopIterationIterator($setIterator(iterable));\n        }\n\n        if ($setAtAtIterator) {\n          return $setAtAtIterator(iterable);\n        }\n\n        if ($setForEach) {\n          var values = [];\n          $setForEach(iterable, function (v) {\n            $arrayPush(values, v);\n          });\n          return getArrayIterator(values);\n        }\n      }\n    };\n\n    module.exports = function getIterator(iterable) {\n      return getCollectionIterator(iterable) || getNonCollectionIterator(iterable);\n    };\n  }\n}","map":{"version":3,"sources":["/Users/floris.veldhuizen/Documents/GitHub/florisveldhuizen.github.io/node_modules/es-get-iterator/index.js"],"names":["isArguments","require","$iterator","Symbol","iterator","module","exports","getIterator","iterable","Array","prototype","call","isArray","isString","GetIntrinsic","$Map","$Set","callBound","$arrayPush","$charCodeAt","$stringSlice","advanceStringIndex","S","index","length","first","second","getArrayIterator","arraylike","i","next","done","value","getNonCollectionIterator","noPrimordialCollections","nextIndex","isMap","isSet","$mapForEach","$setForEach","process","versions","node","$mapIterator","$setIterator","getStopIterationIterator","undefined","e","$mapAtAtIterator","$setAtAtIterator","getCollectionIterator","entries","v","k","values"],"mappings":"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","sourcesContent":["'use strict';\n\n/* eslint global-require: 0 */\n// the code is structured this way so that bundlers can\n// alias out `has-symbols` to `() => true` or `() => false` if your target\n// environments' Symbol capabilities are known, and then use\n// dead code elimination on the rest of this module.\n//\n// Similarly, `isarray` can be aliased to `Array.isArray` if\n// available in all target environments.\n\nvar isArguments = require('is-arguments');\n\nif (require('has-symbols')() || require('has-symbols/shams')()) {\n\tvar $iterator = Symbol.iterator;\n\t// Symbol is available natively or shammed\n\t// natively:\n\t//  - Chrome >= 38\n\t//  - Edge 12-14?, Edge >= 15 for sure\n\t//  - FF >= 36\n\t//  - Safari >= 9\n\t//  - node >= 0.12\n\tmodule.exports = function getIterator(iterable) {\n\t\t// alternatively, `iterable[$iterator]?.()`\n\t\tif (iterable != null && typeof iterable[$iterator] !== 'undefined') {\n\t\t\treturn iterable[$iterator]();\n\t\t}\n\t\tif (isArguments(iterable)) {\n\t\t\t// arguments objects lack Symbol.iterator\n\t\t\t// - node 0.12\n\t\t\treturn Array.prototype[$iterator].call(iterable);\n\t\t}\n\t};\n} else {\n\t// Symbol is not available, native or shammed\n\tvar isArray = require('isarray');\n\tvar isString = require('is-string');\n\tvar GetIntrinsic = require('get-intrinsic');\n\tvar $Map = GetIntrinsic('%Map%', true);\n\tvar $Set = GetIntrinsic('%Set%', true);\n\tvar callBound = require('call-bind/callBound');\n\tvar $arrayPush = callBound('Array.prototype.push');\n\tvar $charCodeAt = callBound('String.prototype.charCodeAt');\n\tvar $stringSlice = callBound('String.prototype.slice');\n\n\tvar advanceStringIndex = function advanceStringIndex(S, index) {\n\t\tvar length = S.length;\n\t\tif ((index + 1) >= length) {\n\t\t\treturn index + 1;\n\t\t}\n\n\t\tvar first = $charCodeAt(S, index);\n\t\tif (first < 0xD800 || first > 0xDBFF) {\n\t\t\treturn index + 1;\n\t\t}\n\n\t\tvar second = $charCodeAt(S, index + 1);\n\t\tif (second < 0xDC00 || second > 0xDFFF) {\n\t\t\treturn index + 1;\n\t\t}\n\n\t\treturn index + 2;\n\t};\n\n\tvar getArrayIterator = function getArrayIterator(arraylike) {\n\t\tvar i = 0;\n\t\treturn {\n\t\t\tnext: function next() {\n\t\t\t\tvar done = i >= arraylike.length;\n\t\t\t\tvar value;\n\t\t\t\tif (!done) {\n\t\t\t\t\tvalue = arraylike[i];\n\t\t\t\t\ti += 1;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tdone: done,\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t};\n\n\tvar getNonCollectionIterator = function getNonCollectionIterator(iterable, noPrimordialCollections) {\n\t\tif (isArray(iterable) || isArguments(iterable)) {\n\t\t\treturn getArrayIterator(iterable);\n\t\t}\n\t\tif (isString(iterable)) {\n\t\t\tvar i = 0;\n\t\t\treturn {\n\t\t\t\tnext: function next() {\n\t\t\t\t\tvar nextIndex = advanceStringIndex(iterable, i);\n\t\t\t\t\tvar value = $stringSlice(iterable, i, nextIndex);\n\t\t\t\t\ti = nextIndex;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: nextIndex > iterable.length,\n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t// es6-shim and es-shims' es-map use a string \"_es6-shim iterator_\" property on different iterables, such as MapIterator.\n\t\tif (noPrimordialCollections && typeof iterable['_es6-shim iterator_'] !== 'undefined') {\n\t\t\treturn iterable['_es6-shim iterator_']();\n\t\t}\n\t};\n\n\tif (!$Map && !$Set) {\n\t\t// the only language iterables are Array, String, arguments\n\t\t// - Safari <= 6.0\n\t\t// - Chrome < 38\n\t\t// - node < 0.12\n\t\t// - FF < 13\n\t\t// - IE < 11\n\t\t// - Edge < 11\n\n\t\tmodule.exports = function getIterator(iterable) {\n\t\t\tif (iterable != null) {\n\t\t\t\treturn getNonCollectionIterator(iterable, true);\n\t\t\t}\n\t\t};\n\t} else {\n\t\t// either Map or Set are available, but Symbol is not\n\t\t// - es6-shim on an ES5 browser\n\t\t// - Safari 6.2 (maybe 6.1?)\n\t\t// - FF v[13, 36)\n\t\t// - IE 11\n\t\t// - Edge 11\n\t\t// - Safari v[6, 9)\n\n\t\tvar isMap = require('is-map');\n\t\tvar isSet = require('is-set');\n\n\t\t// Firefox >= 27, IE 11, Safari 6.2 - 9, Edge 11, es6-shim in older envs, all have forEach\n\t\tvar $mapForEach = callBound('Map.prototype.forEach', true);\n\t\tvar $setForEach = callBound('Set.prototype.forEach', true);\n\t\tif (typeof process === 'undefined' || !process.versions || !process.versions.node) { // \"if is not node\"\n\n\t\t\t// Firefox 17 - 26 has `.iterator()`, whose iterator `.next()` either\n\t\t\t// returns a value, or throws a StopIteration object. These browsers\n\t\t\t// do not have any other mechanism for iteration.\n\t\t\tvar $mapIterator = callBound('Map.prototype.iterator', true);\n\t\t\tvar $setIterator = callBound('Set.prototype.iterator', true);\n\t\t\tvar getStopIterationIterator = function (iterator) {\n\t\t\t\tvar done = false;\n\t\t\t\treturn {\n\t\t\t\t\tnext: function next() {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tdone: done,\n\t\t\t\t\t\t\t\tvalue: done ? undefined : iterator.next()\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tdone = true;\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tdone: true,\n\t\t\t\t\t\t\t\tvalue: undefined\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\t\t// Firefox 27-35, and some older es6-shim versions, use a string \"@@iterator\" property\n\t\t// this returns a proper iterator object, so we should use it instead of forEach.\n\t\t// newer es6-shim versions use a string \"_es6-shim iterator_\" property.\n\t\tvar $mapAtAtIterator = callBound('Map.prototype.@@iterator', true) || callBound('Map.prototype._es6-shim iterator_', true);\n\t\tvar $setAtAtIterator = callBound('Set.prototype.@@iterator', true) || callBound('Set.prototype._es6-shim iterator_', true);\n\n\t\tvar getCollectionIterator = function getCollectionIterator(iterable) {\n\t\t\tif (isMap(iterable)) {\n\t\t\t\tif ($mapIterator) {\n\t\t\t\t\treturn getStopIterationIterator($mapIterator(iterable));\n\t\t\t\t}\n\t\t\t\tif ($mapAtAtIterator) {\n\t\t\t\t\treturn $mapAtAtIterator(iterable);\n\t\t\t\t}\n\t\t\t\tif ($mapForEach) {\n\t\t\t\t\tvar entries = [];\n\t\t\t\t\t$mapForEach(iterable, function (v, k) {\n\t\t\t\t\t\t$arrayPush(entries, [k, v]);\n\t\t\t\t\t});\n\t\t\t\t\treturn getArrayIterator(entries);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isSet(iterable)) {\n\t\t\t\tif ($setIterator) {\n\t\t\t\t\treturn getStopIterationIterator($setIterator(iterable));\n\t\t\t\t}\n\t\t\t\tif ($setAtAtIterator) {\n\t\t\t\t\treturn $setAtAtIterator(iterable);\n\t\t\t\t}\n\t\t\t\tif ($setForEach) {\n\t\t\t\t\tvar values = [];\n\t\t\t\t\t$setForEach(iterable, function (v) {\n\t\t\t\t\t\t$arrayPush(values, v);\n\t\t\t\t\t});\n\t\t\t\t\treturn getArrayIterator(values);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tmodule.exports = function getIterator(iterable) {\n\t\t\treturn getCollectionIterator(iterable) || getNonCollectionIterator(iterable);\n\t\t};\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}