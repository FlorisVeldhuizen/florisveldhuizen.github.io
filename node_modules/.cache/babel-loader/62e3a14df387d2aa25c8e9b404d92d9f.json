{"ast":null,"code":"'use strict';\n\nvar hasBigInts = require('has-bigints')();\n\nif (hasBigInts) {\n  var bigIntValueOf = BigInt.prototype.valueOf;\n\n  var tryBigInt = function tryBigIntObject(value) {\n    try {\n      bigIntValueOf.call(value);\n      return true;\n    } catch (e) {}\n\n    return false;\n  };\n\n  module.exports = function isBigInt(value) {\n    if (value === null || typeof value === 'undefined' || typeof value === 'boolean' || typeof value === 'string' || typeof value === 'number' || typeof value === 'symbol' || typeof value === 'function') {\n      return false;\n    }\n\n    if (typeof value === 'bigint') {\n      return true;\n    }\n\n    return tryBigInt(value);\n  };\n} else {\n  module.exports = function isBigInt(value) {\n    return false && value;\n  };\n}","map":{"version":3,"sources":["/Users/floris.veldhuizen/Documents/GitHub/florisveldhuizen.github.io/node_modules/is-bigint/index.js"],"names":["hasBigInts","require","bigIntValueOf","BigInt","prototype","valueOf","tryBigInt","tryBigIntObject","value","call","e","module","exports","isBigInt"],"mappings":"AAAA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAAP,EAAjB;;AAEA,IAAID,UAAJ,EAAgB;AACf,MAAIE,aAAa,GAAGC,MAAM,CAACC,SAAP,CAAiBC,OAArC;;AACA,MAAIC,SAAS,GAAG,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC/C,QAAI;AACHN,MAAAA,aAAa,CAACO,IAAd,CAAmBD,KAAnB;AACA,aAAO,IAAP;AACA,KAHD,CAGE,OAAOE,CAAP,EAAU,CACX;;AACD,WAAO,KAAP;AACA,GAPD;;AASAC,EAAAA,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAkBL,KAAlB,EAAyB;AACzC,QACCA,KAAK,KAAK,IAAV,IACG,OAAOA,KAAP,KAAiB,WADpB,IAEG,OAAOA,KAAP,KAAiB,SAFpB,IAGG,OAAOA,KAAP,KAAiB,QAHpB,IAIG,OAAOA,KAAP,KAAiB,QAJpB,IAKG,OAAOA,KAAP,KAAiB,QALpB,IAMG,OAAOA,KAAP,KAAiB,UAPrB,EAQE;AACD,aAAO,KAAP;AACA;;AACD,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC9B,aAAO,IAAP;AACA;;AAED,WAAOF,SAAS,CAACE,KAAD,CAAhB;AACA,GAjBD;AAkBA,CA7BD,MA6BO;AACNG,EAAAA,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAkBL,KAAlB,EAAyB;AACzC,WAAO,SAASA,KAAhB;AACA,GAFD;AAGA","sourcesContent":["'use strict';\n\nvar hasBigInts = require('has-bigints')();\n\nif (hasBigInts) {\n\tvar bigIntValueOf = BigInt.prototype.valueOf;\n\tvar tryBigInt = function tryBigIntObject(value) {\n\t\ttry {\n\t\t\tbigIntValueOf.call(value);\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t}\n\t\treturn false;\n\t};\n\n\tmodule.exports = function isBigInt(value) {\n\t\tif (\n\t\t\tvalue === null\n\t\t\t|| typeof value === 'undefined'\n\t\t\t|| typeof value === 'boolean'\n\t\t\t|| typeof value === 'string'\n\t\t\t|| typeof value === 'number'\n\t\t\t|| typeof value === 'symbol'\n\t\t\t|| typeof value === 'function'\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\tif (typeof value === 'bigint') {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn tryBigInt(value);\n\t};\n} else {\n\tmodule.exports = function isBigInt(value) {\n\t\treturn false && value;\n\t};\n}\n"]},"metadata":{},"sourceType":"script"}